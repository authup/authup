/*
 * Copyright (c) 2025.
 * Author Peter Placzek (tada5hi)
 * For the full copyright and license information,
 * view the LICENSE file that was distributed with this source code.
 */

import type { SSRContext } from 'vue/server-renderer';
import { renderToString } from 'vue/server-renderer';
import { basename } from 'node:path';
import { createApp } from './app';
import { createWindowPayloadHTML } from './window';
import type { HydrationPayload } from './types';

export type RenderContext = {
    url: string,
    manifest: Record<string, string[]>,
    payload: HydrationPayload
};

export async function render(ctx: RenderContext) {
    const { app, router } = createApp(ctx.payload);

    // set the router to the desired URL before rendering
    await router.push(ctx.url);
    await router.isReady();

    // passing SSR context object which will be available via useSSRContext()
    // @vitejs/plugin-vue injects code into a component's setup() that registers
    // itself on ctx.modules. After the render, ctx.modules would contain all the
    // components that have been instantiated during this render call.
    const ssrContext: SSRContext = {};
    const html = await renderToString(app, ssrContext);

    // the SSR manifest generated by Vite contains module -> chunk/asset mapping
    // which we can then use to determine what files need to be preloaded for this
    // request.
    const preloadLinks = renderPreloadLinks(ssrContext.modules, ctx.manifest);
    return [
        html + createWindowPayloadHTML(ctx.payload),
        preloadLinks,
    ];
}

function renderPreloadLinks(modules: string[], manifest: Record<string, string[]>) {
    let links = '';
    const seen = new Set();
    modules.forEach((id) => {
        const files = manifest[id];
        if (files) {
            files.forEach((file) => {
                if (!seen.has(file)) {
                    seen.add(file);
                    const filename = basename(file);
                    if (manifest[filename]) {
                        // eslint-disable-next-line no-restricted-syntax
                        for (const depFile of manifest[filename]) {
                            links += renderPreloadLink(depFile);
                            seen.add(depFile);
                        }
                    }

                    links += renderPreloadLink(file);
                }
            });
        }
    });
    return links;
}

function renderPreloadLink(file: string) {
    if (file.endsWith('.js')) {
        return `<link rel="modulepreload" crossorigin href="${file}">`;
    } if (file.endsWith('.css')) {
        return `<link rel="stylesheet" href="${file}">`;
    } if (file.endsWith('.woff')) {
        return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`;
    } if (file.endsWith('.woff2')) {
        return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`;
    } if (file.endsWith('.gif')) {
        return ` <link rel="preload" href="${file}" as="image" type="image/gif">`;
    } if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
        return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`;
    } if (file.endsWith('.png')) {
        return ` <link rel="preload" href="${file}" as="image" type="image/png">`;
    }
    // TODO
    return '';
}
